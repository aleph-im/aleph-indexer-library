/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * CannotCloseProduct: 'There are still users with active payments'
 *
 * @category Errors
 * @category generated
 */
export class CannotCloseProductError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'CannotCloseProduct'
  constructor() {
    super('There are still users with active payments')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCloseProductError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new CannotCloseProductError())
createErrorFromNameLookup.set(
  'CannotCloseProduct',
  () => new CannotCloseProductError(),
)

/**
 * StringTooLong: 'You are providing a string that is too long'
 *
 * @category Errors
 * @category generated
 */
export class StringTooLongError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'StringTooLong'
  constructor() {
    super('You are providing a string that is too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StringTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new StringTooLongError())
createErrorFromNameLookup.set('StringTooLong', () => new StringTooLongError())

/**
 * NumericalOverflow: 'Numerical Overflow happened'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'NumericalOverflow'
  constructor() {
    super('Numerical Overflow happened')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new NumericalOverflowError())
createErrorFromNameLookup.set(
  'NumericalOverflow',
  () => new NumericalOverflowError(),
)

/**
 * IncorrectFee: 'You are setting a higher fee than allowed'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectFeeError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'IncorrectFee'
  constructor() {
    super('You are setting a higher fee than allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectFeeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new IncorrectFeeError())
createErrorFromNameLookup.set('IncorrectFee', () => new IncorrectFeeError())

/**
 * InconrrectAppAccount: 'You are providing a wrong app account'
 *
 * @category Errors
 * @category generated
 */
export class InconrrectAppAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InconrrectAppAccount'
  constructor() {
    super('You are providing a wrong app account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InconrrectAppAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InconrrectAppAccountError())
createErrorFromNameLookup.set(
  'InconrrectAppAccount',
  () => new InconrrectAppAccountError(),
)

/**
 * InconrrectCreatorAccount: 'You are providing a wrong creator vault'
 *
 * @category Errors
 * @category generated
 */
export class InconrrectCreatorAccountError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InconrrectCreatorAccount'
  constructor() {
    super('You are providing a wrong creator vault')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InconrrectCreatorAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InconrrectCreatorAccountError())
createErrorFromNameLookup.set(
  'InconrrectCreatorAccount',
  () => new InconrrectCreatorAccountError(),
)

/**
 * IncorrectPaymentMint: 'You are trying to pay a different mint than the one stated by the seller'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectPaymentMintError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'IncorrectPaymentMint'
  constructor() {
    super(
      'You are trying to pay a different mint than the one stated by the seller',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectPaymentMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new IncorrectPaymentMintError())
createErrorFromNameLookup.set(
  'IncorrectPaymentMint',
  () => new IncorrectPaymentMintError(),
)

/**
 * IncorrectATA: 'You are providing a wrong associated token account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectATAError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'IncorrectATA'
  constructor() {
    super('You are providing a wrong associated token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectATAError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new IncorrectATAError())
createErrorFromNameLookup.set('IncorrectATA', () => new IncorrectATAError())

/**
 * IncorrectAuthority: 'You are not the authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAuthorityError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'IncorrectAuthority'
  constructor() {
    super('You are not the authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new IncorrectAuthorityError())
createErrorFromNameLookup.set(
  'IncorrectAuthority',
  () => new IncorrectAuthorityError(),
)

/**
 * IncorrectMint: 'You are providing an incorrect mint'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMintError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'IncorrectMint'
  constructor() {
    super('You are providing an incorrect mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new IncorrectMintError())
createErrorFromNameLookup.set('IncorrectMint', () => new IncorrectMintError())

/**
 * IncorrectNonce: 'Given nonce is invalid'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectNonceError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'IncorrectNonce'
  constructor() {
    super('Given nonce is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectNonceError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new IncorrectNonceError())
createErrorFromNameLookup.set('IncorrectNonce', () => new IncorrectNonceError())

/**
 * IncorrectSeeds: 'Incorrect seeds'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectSeedsError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'IncorrectSeeds'
  constructor() {
    super('Incorrect seeds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectSeedsError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new IncorrectSeedsError())
createErrorFromNameLookup.set('IncorrectSeeds', () => new IncorrectSeedsError())

/**
 * IncorrectGovernanceName: 'You are not allowed to create a governance account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectGovernanceNameError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'IncorrectGovernanceName'
  constructor() {
    super('You are not allowed to create a governance account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectGovernanceNameError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new IncorrectGovernanceNameError())
createErrorFromNameLookup.set(
  'IncorrectGovernanceName',
  () => new IncorrectGovernanceNameError(),
)

/**
 * IncorrectTokenProgram: 'You are providing a wrong token program'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectTokenProgramError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'IncorrectTokenProgram'
  constructor() {
    super('You are providing a wrong token program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectTokenProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new IncorrectTokenProgramError())
createErrorFromNameLookup.set(
  'IncorrectTokenProgram',
  () => new IncorrectTokenProgramError(),
)

/**
 * IncorrectInstruction: 'You are trying to sign an incorrect instruction based on marketplace configuration'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectInstructionError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'IncorrectInstruction'
  constructor() {
    super(
      'You are trying to sign an incorrect instruction based on marketplace configuration',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new IncorrectInstructionError())
createErrorFromNameLookup.set(
  'IncorrectInstruction',
  () => new IncorrectInstructionError(),
)

/**
 * ConversionError: 'Failed to convert data'
 *
 * @category Errors
 * @category generated
 */
export class ConversionErrorError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'ConversionError'
  constructor() {
    super('Failed to convert data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConversionErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new ConversionErrorError())
createErrorFromNameLookup.set(
  'ConversionError',
  () => new ConversionErrorError(),
)

/**
 * TransferError: 'Transfer error'
 *
 * @category Errors
 * @category generated
 */
export class TransferErrorError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'TransferError'
  constructor() {
    super('Transfer error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransferErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new TransferErrorError())
createErrorFromNameLookup.set('TransferError', () => new TransferErrorError())

/**
 * MintToError: 'Error during the mint_to CPI'
 *
 * @category Errors
 * @category generated
 */
export class MintToErrorError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'MintToError'
  constructor() {
    super('Error during the mint_to CPI')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintToErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new MintToErrorError())
createErrorFromNameLookup.set('MintToError', () => new MintToErrorError())

/**
 * BurnError: 'Error during the burn CPI'
 *
 * @category Errors
 * @category generated
 */
export class BurnErrorError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'BurnError'
  constructor() {
    super('Error during the burn CPI')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BurnErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new BurnErrorError())
createErrorFromNameLookup.set('BurnError', () => new BurnErrorError())

/**
 * CloseAccountError: 'Error during the close account CPI'
 *
 * @category Errors
 * @category generated
 */
export class CloseAccountErrorError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'CloseAccountError'
  constructor() {
    super('Error during the close account CPI')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CloseAccountErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new CloseAccountErrorError())
createErrorFromNameLookup.set(
  'CloseAccountError',
  () => new CloseAccountErrorError(),
)

/**
 * ClosedPromotion: 'Currently we do not offer any promotion'
 *
 * @category Errors
 * @category generated
 */
export class ClosedPromotionError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'ClosedPromotion'
  constructor() {
    super('Currently we do not offer any promotion')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ClosedPromotionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new ClosedPromotionError())
createErrorFromNameLookup.set(
  'ClosedPromotion',
  () => new ClosedPromotionError(),
)

/**
 * OpenPromotion: 'Currently you can not withdraw the bonus because the promotion has not finished'
 *
 * @category Errors
 * @category generated
 */
export class OpenPromotionError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'OpenPromotion'
  constructor() {
    super(
      'Currently you can not withdraw the bonus because the promotion has not finished',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OpenPromotionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new OpenPromotionError())
createErrorFromNameLookup.set('OpenPromotion', () => new OpenPromotionError())

/**
 * VaultsVectorFull: 'The max size of reward vaults are set at 5'
 *
 * @category Errors
 * @category generated
 */
export class VaultsVectorFullError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'VaultsVectorFull'
  constructor() {
    super('The max size of reward vaults are set at 5')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VaultsVectorFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new VaultsVectorFullError())
createErrorFromNameLookup.set(
  'VaultsVectorFull',
  () => new VaultsVectorFullError(),
)

/**
 * ExtensionNotSupported: 'Currently this extension is not supported'
 *
 * @category Errors
 * @category generated
 */
export class ExtensionNotSupportedError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'ExtensionNotSupported'
  constructor() {
    super('Currently this extension is not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExtensionNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new ExtensionNotSupportedError())
createErrorFromNameLookup.set(
  'ExtensionNotSupported',
  () => new ExtensionNotSupportedError(),
)

/**
 * CreateAccountError: 'Error creating mint account'
 *
 * @category Errors
 * @category generated
 */
export class CreateAccountErrorError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'CreateAccountError'
  constructor() {
    super('Error creating mint account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CreateAccountErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new CreateAccountErrorError())
createErrorFromNameLookup.set(
  'CreateAccountError',
  () => new CreateAccountErrorError(),
)

/**
 * MintExtensionError: 'Error extension init'
 *
 * @category Errors
 * @category generated
 */
export class MintExtensionErrorError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'MintExtensionError'
  constructor() {
    super('Error extension init')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintExtensionErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new MintExtensionErrorError())
createErrorFromNameLookup.set(
  'MintExtensionError',
  () => new MintExtensionErrorError(),
)

/**
 * InitMintError: 'Error mint init'
 *
 * @category Errors
 * @category generated
 */
export class InitMintErrorError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'InitMintError'
  constructor() {
    super('Error mint init')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InitMintErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x178a, () => new InitMintErrorError())
createErrorFromNameLookup.set('InitMintError', () => new InitMintErrorError())

/**
 * OptionalAccountNotProvided: 'Optional account not provided'
 *
 * @category Errors
 * @category generated
 */
export class OptionalAccountNotProvidedError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'OptionalAccountNotProvided'
  constructor() {
    super('Optional account not provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OptionalAccountNotProvidedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178b,
  () => new OptionalAccountNotProvidedError(),
)
createErrorFromNameLookup.set(
  'OptionalAccountNotProvided',
  () => new OptionalAccountNotProvidedError(),
)

/**
 * NotInWithelist: 'You dont have the token that allows you to create products'
 *
 * @category Errors
 * @category generated
 */
export class NotInWithelistError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'NotInWithelist'
  constructor() {
    super('You dont have the token that allows you to create products')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotInWithelistError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new NotInWithelistError())
createErrorFromNameLookup.set('NotInWithelist', () => new NotInWithelistError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}

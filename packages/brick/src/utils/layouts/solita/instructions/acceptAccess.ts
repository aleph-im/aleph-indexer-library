/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AcceptAccess
 * @category generated
 */
export const acceptAccessStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'AcceptAccessInstructionArgs',
)
/**
 * Accounts required by the _acceptAccess_ instruction
 *
 * @property [] tokenProgram2022
 * @property [] associatedTokenProgram
 * @property [_writable_, **signer**] signer
 * @property [_writable_] receiver
 * @property [_writable_] marketplace
 * @property [_writable_] request
 * @property [_writable_] accessMint
 * @property [_writable_] accessVault
 * @category Instructions
 * @category AcceptAccess
 * @category generated
 */
export type AcceptAccessInstructionAccounts = {
  systemProgram?: web3.PublicKey
  tokenProgram2022: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  signer: web3.PublicKey
  receiver: web3.PublicKey
  marketplace: web3.PublicKey
  request: web3.PublicKey
  accessMint: web3.PublicKey
  accessVault: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const acceptAccessInstructionDiscriminator = [
  180, 246, 220, 192, 211, 243, 183, 191,
]

/**
 * Creates a _AcceptAccess_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category AcceptAccess
 * @category generated
 */
export function createAcceptAccessInstruction(
  accounts: AcceptAccessInstructionAccounts,
  programId = new web3.PublicKey('brick5uEiJqSkfuAvMtKmq7kiuEVmbjVMiigyV51GRF'),
) {
  const [data] = acceptAccessStruct.serialize({
    instructionDiscriminator: acceptAccessInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram2022,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.receiver,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.marketplace,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.request,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.accessMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.accessVault,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

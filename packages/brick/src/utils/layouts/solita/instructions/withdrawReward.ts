/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawReward
 * @category generated
 */
export const withdrawRewardStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'WithdrawRewardInstructionArgs',
)
/**
 * Accounts required by the _withdrawReward_ instruction
 *
 * @property [] tokenProgramV0
 * @property [_writable_, **signer**] signer
 * @property [_writable_] marketplace
 * @property [_writable_] reward
 * @property [] rewardMint
 * @property [_writable_] receiverVault
 * @property [_writable_] rewardVault
 * @category Instructions
 * @category WithdrawReward
 * @category generated
 */
export type WithdrawRewardInstructionAccounts = {
  tokenProgramV0: web3.PublicKey
  signer: web3.PublicKey
  marketplace: web3.PublicKey
  reward: web3.PublicKey
  rewardMint: web3.PublicKey
  receiverVault: web3.PublicKey
  rewardVault: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawRewardInstructionDiscriminator = [
  191, 187, 176, 137, 9, 25, 187, 244,
]

/**
 * Creates a _WithdrawReward_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category WithdrawReward
 * @category generated
 */
export function createWithdrawRewardInstruction(
  accounts: WithdrawRewardInstructionAccounts,
  programId = new web3.PublicKey('brick5uEiJqSkfuAvMtKmq7kiuEVmbjVMiigyV51GRF'),
) {
  const [data] = withdrawRewardStruct.serialize({
    instructionDiscriminator: withdrawRewardInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tokenProgramV0,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.marketplace,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reward,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.receiverVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

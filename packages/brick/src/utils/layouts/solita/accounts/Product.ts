/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { SellerConfig, sellerConfigBeet } from '../types/SellerConfig.js'
import { ProductBumps, productBumpsBeet } from '../types/ProductBumps.js'

/**
 * Arguments used to create {@link Product}
 * @category Accounts
 * @category generated
 */
export type ProductArgs = {
  authority: web3.PublicKey
  firstId: number[] /* size: 32 */
  secondId: number[] /* size: 32 */
  marketplace: web3.PublicKey
  productMint: web3.PublicKey
  merkleTree: web3.PublicKey
  sellerConfig: SellerConfig
  bumps: ProductBumps
}

export const productDiscriminator = [102, 76, 55, 251, 38, 73, 224, 229]
/**
 * Holds the data for the {@link Product} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Product implements ProductArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly firstId: number[] /* size: 32 */,
    readonly secondId: number[] /* size: 32 */,
    readonly marketplace: web3.PublicKey,
    readonly productMint: web3.PublicKey,
    readonly merkleTree: web3.PublicKey,
    readonly sellerConfig: SellerConfig,
    readonly bumps: ProductBumps,
  ) {}

  /**
   * Creates a {@link Product} instance from the provided args.
   */
  static fromArgs(args: ProductArgs) {
    return new Product(
      args.authority,
      args.firstId,
      args.secondId,
      args.marketplace,
      args.productMint,
      args.merkleTree,
      args.sellerConfig,
      args.bumps,
    )
  }

  /**
   * Deserializes the {@link Product} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Product, number] {
    return Product.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Product} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Product> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Product account at ${address}`)
    }
    return Product.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'brick5uEiJqSkfuAvMtKmq7kiuEVmbjVMiigyV51GRF',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, productBeet)
  }

  /**
   * Deserializes the {@link Product} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Product, number] {
    return productBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Product} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return productBeet.serialize({
      accountDiscriminator: productDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Product}
   */
  static get byteSize() {
    return productBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Product} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Product.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Product} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Product.byteSize
  }

  /**
   * Returns a readable version of {@link Product} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      firstId: this.firstId,
      secondId: this.secondId,
      marketplace: this.marketplace.toBase58(),
      productMint: this.productMint.toBase58(),
      merkleTree: this.merkleTree.toBase58(),
      sellerConfig: this.sellerConfig,
      bumps: this.bumps,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const productBeet = new beet.BeetStruct<
  Product,
  ProductArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['firstId', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['secondId', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['marketplace', beetSolana.publicKey],
    ['productMint', beetSolana.publicKey],
    ['merkleTree', beetSolana.publicKey],
    ['sellerConfig', sellerConfigBeet],
    ['bumps', productBumpsBeet],
  ],
  Product.fromArgs,
  'Product',
)

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  BurnCollectionV1Args,
  burnCollectionV1ArgsBeet,
} from '../types/BurnCollectionV1Args.js'

/**
 * @category Instructions
 * @category BurnCollectionV1
 * @category generated
 */
export type BurnCollectionV1InstructionArgs = {
  burnCollectionV1Args: BurnCollectionV1Args
}
/**
 * @category Instructions
 * @category BurnCollectionV1
 * @category generated
 */
export const BurnCollectionV1Struct = new beet.FixableBeetArgsStruct<
  BurnCollectionV1InstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['burnCollectionV1Args', burnCollectionV1ArgsBeet],
  ],
  'BurnCollectionV1InstructionArgs',
)
/**
 * Accounts required by the _BurnCollectionV1_ instruction
 *
 * @property [_writable_] collection
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] authority (optional)
 * @property [] logWrapper (optional)
 * @category Instructions
 * @category BurnCollectionV1
 * @category generated
 */
export type BurnCollectionV1InstructionAccounts = {
  collection: web3.PublicKey
  payer: web3.PublicKey
  authority?: web3.PublicKey
  logWrapper?: web3.PublicKey
}

export const burnCollectionV1InstructionDiscriminator = 13

/**
 * Creates a _BurnCollectionV1_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BurnCollectionV1
 * @category generated
 */
export function createBurnCollectionV1Instruction(
  accounts: BurnCollectionV1InstructionAccounts,
  args: BurnCollectionV1InstructionArgs,
  programId = new web3.PublicKey(
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  ),
) {
  const [data] = BurnCollectionV1Struct.serialize({
    instructionDiscriminator: burnCollectionV1InstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.authority ?? programId,
      isWritable: accounts.authority != null,
      isSigner: accounts.authority != null,
    },
    {
      pubkey: accounts.logWrapper ?? programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  LifecycleHookInitInfo,
  lifecycleHookInitInfoBeet,
} from './LifecycleHookInitInfo.js'
import { OracleInitInfo, oracleInitInfoBeet } from './OracleInitInfo.js'
import { AppDataInitInfo, appDataInitInfoBeet } from './AppDataInitInfo.js'
import {
  LinkedLifecycleHookInitInfo,
  linkedLifecycleHookInitInfoBeet,
} from './LinkedLifecycleHookInitInfo.js'
import {
  LinkedAppDataInitInfo,
  linkedAppDataInitInfoBeet,
} from './LinkedAppDataInitInfo.js'
import {
  DataSectionInitInfo,
  dataSectionInitInfoBeet,
} from './DataSectionInitInfo.js'
/**
 * This type is used to derive the {@link ExternalPluginAdapterInitInfo} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ExternalPluginAdapterInitInfo} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ExternalPluginAdapterInitInfoRecord = {
  LifecycleHook: { fields: [LifecycleHookInitInfo] }
  Oracle: { fields: [OracleInitInfo] }
  AppData: { fields: [AppDataInitInfo] }
  LinkedLifecycleHook: { fields: [LinkedLifecycleHookInitInfo] }
  LinkedAppData: { fields: [LinkedAppDataInitInfo] }
  DataSection: { fields: [DataSectionInitInfo] }
}

/**
 * Union type respresenting the ExternalPluginAdapterInitInfo data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isExternalPluginAdapterInitInfo*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ExternalPluginAdapterInitInfo =
  beet.DataEnumKeyAsKind<ExternalPluginAdapterInitInfoRecord>

export const isExternalPluginAdapterInitInfoLifecycleHook = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'LifecycleHook' } =>
  x.__kind === 'LifecycleHook'
export const isExternalPluginAdapterInitInfoOracle = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'Oracle' } =>
  x.__kind === 'Oracle'
export const isExternalPluginAdapterInitInfoAppData = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'AppData' } =>
  x.__kind === 'AppData'
export const isExternalPluginAdapterInitInfoLinkedLifecycleHook = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'LinkedLifecycleHook' } =>
  x.__kind === 'LinkedLifecycleHook'
export const isExternalPluginAdapterInitInfoLinkedAppData = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'LinkedAppData' } =>
  x.__kind === 'LinkedAppData'
export const isExternalPluginAdapterInitInfoDataSection = (
  x: ExternalPluginAdapterInitInfo,
): x is ExternalPluginAdapterInitInfo & { __kind: 'DataSection' } =>
  x.__kind === 'DataSection'

/**
 * @category userTypes
 * @category generated
 */
export const externalPluginAdapterInitInfoBeet =
  beet.dataEnum<ExternalPluginAdapterInitInfoRecord>([
    [
      'LifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['LifecycleHook']
      >(
        [['fields', beet.tuple([lifecycleHookInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["LifecycleHook"]',
      ),
    ],
    [
      'Oracle',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['Oracle']
      >(
        [['fields', beet.tuple([oracleInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["Oracle"]',
      ),
    ],
    [
      'AppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['AppData']
      >(
        [['fields', beet.tuple([appDataInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["AppData"]',
      ),
    ],
    [
      'LinkedLifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['LinkedLifecycleHook']
      >(
        [['fields', beet.tuple([linkedLifecycleHookInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["LinkedLifecycleHook"]',
      ),
    ],
    [
      'LinkedAppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['LinkedAppData']
      >(
        [['fields', beet.tuple([linkedAppDataInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["LinkedAppData"]',
      ),
    ],
    [
      'DataSection',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterInitInfoRecord['DataSection']
      >(
        [['fields', beet.tuple([dataSectionInitInfoBeet])]],
        'ExternalPluginAdapterInitInfoRecord["DataSection"]',
      ),
    ],
  ]) as beet.FixableBeet<
    ExternalPluginAdapterInitInfo,
    ExternalPluginAdapterInitInfo
  >

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Authority, authorityBeet } from './Authority.js'
import {
  HookableLifecycleEvent,
  hookableLifecycleEventBeet,
} from './HookableLifecycleEvent.js'
import {
  ExternalCheckResult,
  externalCheckResultBeet,
} from './ExternalCheckResult.js'
import { ExtraAccount, extraAccountBeet } from './ExtraAccount.js'
import {
  ValidationResultsOffset,
  validationResultsOffsetBeet,
} from './ValidationResultsOffset.js'
export type OracleInitInfo = {
  baseAddress: web3.PublicKey
  initPluginAuthority: beet.COption<Authority>
  lifecycleChecks: [HookableLifecycleEvent, ExternalCheckResult][]
  baseAddressConfig: beet.COption<ExtraAccount>
  resultsOffset: beet.COption<ValidationResultsOffset>
}

/**
 * @category userTypes
 * @category generated
 */
export const oracleInitInfoBeet =
  new beet.FixableBeetArgsStruct<OracleInitInfo>(
    [
      ['baseAddress', beetSolana.publicKey],
      ['initPluginAuthority', beet.coption(authorityBeet)],
      [
        'lifecycleChecks',
        beet.array(
          beet.fixedSizeTuple([
            hookableLifecycleEventBeet,
            externalCheckResultBeet,
          ]),
        ),
      ],
      ['baseAddressConfig', beet.coption(extraAccountBeet)],
      ['resultsOffset', beet.coption(validationResultsOffsetBeet)],
    ],
    'OracleInitInfo',
  )

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Seed, seedBeet } from './Seed.js'
/**
 * This type is used to derive the {@link ExtraAccount} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ExtraAccount} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ExtraAccountRecord = {
  PreconfiguredProgram: { isSigner: boolean; isWritable: boolean }
  PreconfiguredCollection: { isSigner: boolean; isWritable: boolean }
  PreconfiguredOwner: { isSigner: boolean; isWritable: boolean }
  PreconfiguredRecipient: { isSigner: boolean; isWritable: boolean }
  PreconfiguredAsset: { isSigner: boolean; isWritable: boolean }
  CustomPda: {
    seeds: Seed[]
    customProgramId: beet.COption<web3.PublicKey>
    isSigner: boolean
    isWritable: boolean
  }
  Address: { address: web3.PublicKey; isSigner: boolean; isWritable: boolean }
}

/**
 * Union type respresenting the ExtraAccount data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isExtraAccount*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ExtraAccount = beet.DataEnumKeyAsKind<ExtraAccountRecord>

export const isExtraAccountPreconfiguredProgram = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'PreconfiguredProgram' } =>
  x.__kind === 'PreconfiguredProgram'
export const isExtraAccountPreconfiguredCollection = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'PreconfiguredCollection' } =>
  x.__kind === 'PreconfiguredCollection'
export const isExtraAccountPreconfiguredOwner = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'PreconfiguredOwner' } =>
  x.__kind === 'PreconfiguredOwner'
export const isExtraAccountPreconfiguredRecipient = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'PreconfiguredRecipient' } =>
  x.__kind === 'PreconfiguredRecipient'
export const isExtraAccountPreconfiguredAsset = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'PreconfiguredAsset' } =>
  x.__kind === 'PreconfiguredAsset'
export const isExtraAccountCustomPda = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'CustomPda' } => x.__kind === 'CustomPda'
export const isExtraAccountAddress = (
  x: ExtraAccount,
): x is ExtraAccount & { __kind: 'Address' } => x.__kind === 'Address'

/**
 * @category userTypes
 * @category generated
 */
export const extraAccountBeet = beet.dataEnum<ExtraAccountRecord>([
  [
    'PreconfiguredProgram',
    new beet.BeetArgsStruct<ExtraAccountRecord['PreconfiguredProgram']>(
      [
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["PreconfiguredProgram"]',
    ),
  ],

  [
    'PreconfiguredCollection',
    new beet.BeetArgsStruct<ExtraAccountRecord['PreconfiguredCollection']>(
      [
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["PreconfiguredCollection"]',
    ),
  ],

  [
    'PreconfiguredOwner',
    new beet.BeetArgsStruct<ExtraAccountRecord['PreconfiguredOwner']>(
      [
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["PreconfiguredOwner"]',
    ),
  ],

  [
    'PreconfiguredRecipient',
    new beet.BeetArgsStruct<ExtraAccountRecord['PreconfiguredRecipient']>(
      [
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["PreconfiguredRecipient"]',
    ),
  ],

  [
    'PreconfiguredAsset',
    new beet.BeetArgsStruct<ExtraAccountRecord['PreconfiguredAsset']>(
      [
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["PreconfiguredAsset"]',
    ),
  ],

  [
    'CustomPda',
    new beet.FixableBeetArgsStruct<ExtraAccountRecord['CustomPda']>(
      [
        ['seeds', beet.array(seedBeet)],
        ['customProgramId', beet.coption(beetSolana.publicKey)],
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["CustomPda"]',
    ),
  ],

  [
    'Address',
    new beet.BeetArgsStruct<ExtraAccountRecord['Address']>(
      [
        ['address', beetSolana.publicKey],
        ['isSigner', beet.bool],
        ['isWritable', beet.bool],
      ],
      'ExtraAccountRecord["Address"]',
    ),
  ],
]) as beet.FixableBeet<ExtraAccount, ExtraAccount>

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { LifecycleHook, lifecycleHookBeet } from './LifecycleHook.js'
import { Oracle, oracleBeet } from './Oracle.js'
import { AppData, appDataBeet } from './AppData.js'
import {
  LinkedLifecycleHook,
  linkedLifecycleHookBeet,
} from './LinkedLifecycleHook.js'
import { LinkedAppData, linkedAppDataBeet } from './LinkedAppData.js'
import { DataSection, dataSectionBeet } from './DataSection.js'
/**
 * This type is used to derive the {@link ExternalPluginAdapter} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ExternalPluginAdapter} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ExternalPluginAdapterRecord = {
  LifecycleHook: { fields: [LifecycleHook] }
  Oracle: { fields: [Oracle] }
  AppData: { fields: [AppData] }
  LinkedLifecycleHook: { fields: [LinkedLifecycleHook] }
  LinkedAppData: { fields: [LinkedAppData] }
  DataSection: { fields: [DataSection] }
}

/**
 * Union type respresenting the ExternalPluginAdapter data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isExternalPluginAdapter*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ExternalPluginAdapter =
  beet.DataEnumKeyAsKind<ExternalPluginAdapterRecord>

export const isExternalPluginAdapterLifecycleHook = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'LifecycleHook' } =>
  x.__kind === 'LifecycleHook'
export const isExternalPluginAdapterOracle = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'Oracle' } => x.__kind === 'Oracle'
export const isExternalPluginAdapterAppData = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'AppData' } => x.__kind === 'AppData'
export const isExternalPluginAdapterLinkedLifecycleHook = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'LinkedLifecycleHook' } =>
  x.__kind === 'LinkedLifecycleHook'
export const isExternalPluginAdapterLinkedAppData = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'LinkedAppData' } =>
  x.__kind === 'LinkedAppData'
export const isExternalPluginAdapterDataSection = (
  x: ExternalPluginAdapter,
): x is ExternalPluginAdapter & { __kind: 'DataSection' } =>
  x.__kind === 'DataSection'

/**
 * @category userTypes
 * @category generated
 */
export const externalPluginAdapterBeet =
  beet.dataEnum<ExternalPluginAdapterRecord>([
    [
      'LifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterRecord['LifecycleHook']
      >(
        [['fields', beet.tuple([lifecycleHookBeet])]],
        'ExternalPluginAdapterRecord["LifecycleHook"]',
      ),
    ],
    [
      'Oracle',
      new beet.FixableBeetArgsStruct<ExternalPluginAdapterRecord['Oracle']>(
        [['fields', beet.tuple([oracleBeet])]],
        'ExternalPluginAdapterRecord["Oracle"]',
      ),
    ],
    [
      'AppData',
      new beet.FixableBeetArgsStruct<ExternalPluginAdapterRecord['AppData']>(
        [['fields', beet.tuple([appDataBeet])]],
        'ExternalPluginAdapterRecord["AppData"]',
      ),
    ],
    [
      'LinkedLifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterRecord['LinkedLifecycleHook']
      >(
        [['fields', beet.tuple([linkedLifecycleHookBeet])]],
        'ExternalPluginAdapterRecord["LinkedLifecycleHook"]',
      ),
    ],
    [
      'LinkedAppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterRecord['LinkedAppData']
      >(
        [['fields', beet.tuple([linkedAppDataBeet])]],
        'ExternalPluginAdapterRecord["LinkedAppData"]',
      ),
    ],
    [
      'DataSection',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterRecord['DataSection']
      >(
        [['fields', beet.tuple([dataSectionBeet])]],
        'ExternalPluginAdapterRecord["DataSection"]',
      ),
    ],
  ]) as beet.FixableBeet<ExternalPluginAdapter, ExternalPluginAdapter>

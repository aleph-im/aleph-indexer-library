/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link UpdateAuthority} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UpdateAuthority} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UpdateAuthorityRecord = {
  None: void /* scalar variant */
  Address: { fields: [web3.PublicKey] }
  Collection: { fields: [web3.PublicKey] }
}

/**
 * Union type respresenting the UpdateAuthority data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUpdateAuthority*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UpdateAuthority = beet.DataEnumKeyAsKind<UpdateAuthorityRecord>

export const isUpdateAuthorityNone = (
  x: UpdateAuthority,
): x is UpdateAuthority & { __kind: 'None' } => x.__kind === 'None'
export const isUpdateAuthorityAddress = (
  x: UpdateAuthority,
): x is UpdateAuthority & { __kind: 'Address' } => x.__kind === 'Address'
export const isUpdateAuthorityCollection = (
  x: UpdateAuthority,
): x is UpdateAuthority & { __kind: 'Collection' } => x.__kind === 'Collection'

/**
 * @category userTypes
 * @category generated
 */
export const updateAuthorityBeet = beet.dataEnum<UpdateAuthorityRecord>([
  ['None', beet.unit],
  [
    'Address',
    new beet.BeetArgsStruct<UpdateAuthorityRecord['Address']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'UpdateAuthorityRecord["Address"]',
    ),
  ],
  [
    'Collection',
    new beet.BeetArgsStruct<UpdateAuthorityRecord['Collection']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'UpdateAuthorityRecord["Collection"]',
    ),
  ],
]) as beet.FixableBeet<UpdateAuthority, UpdateAuthority>

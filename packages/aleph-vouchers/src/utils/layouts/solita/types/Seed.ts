/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link Seed} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Seed} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SeedRecord = {
  Collection: void /* scalar variant */
  Owner: void /* scalar variant */
  Recipient: void /* scalar variant */
  Asset: void /* scalar variant */
  Address: { fields: [web3.PublicKey] }
  Bytes: { fields: [Uint8Array] }
}

/**
 * Union type respresenting the Seed data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSeed*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Seed = beet.DataEnumKeyAsKind<SeedRecord>

export const isSeedCollection = (
  x: Seed,
): x is Seed & { __kind: 'Collection' } => x.__kind === 'Collection'
export const isSeedOwner = (x: Seed): x is Seed & { __kind: 'Owner' } =>
  x.__kind === 'Owner'
export const isSeedRecipient = (x: Seed): x is Seed & { __kind: 'Recipient' } =>
  x.__kind === 'Recipient'
export const isSeedAsset = (x: Seed): x is Seed & { __kind: 'Asset' } =>
  x.__kind === 'Asset'
export const isSeedAddress = (x: Seed): x is Seed & { __kind: 'Address' } =>
  x.__kind === 'Address'
export const isSeedBytes = (x: Seed): x is Seed & { __kind: 'Bytes' } =>
  x.__kind === 'Bytes'

/**
 * @category userTypes
 * @category generated
 */
export const seedBeet = beet.dataEnum<SeedRecord>([
  ['Collection', beet.unit],
  ['Owner', beet.unit],
  ['Recipient', beet.unit],
  ['Asset', beet.unit],
  [
    'Address',
    new beet.BeetArgsStruct<SeedRecord['Address']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'SeedRecord["Address"]',
    ),
  ],
  [
    'Bytes',
    new beet.FixableBeetArgsStruct<SeedRecord['Bytes']>(
      [['fields', beet.tuple([beet.bytes])]],
      'SeedRecord["Bytes"]',
    ),
  ],
]) as beet.FixableBeet<Seed, Seed>

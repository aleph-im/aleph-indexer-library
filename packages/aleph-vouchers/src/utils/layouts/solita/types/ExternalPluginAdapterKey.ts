/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Authority, authorityBeet } from './Authority.js'
import { LinkedDataKey, linkedDataKeyBeet } from './LinkedDataKey.js'
/**
 * This type is used to derive the {@link ExternalPluginAdapterKey} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ExternalPluginAdapterKey} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ExternalPluginAdapterKeyRecord = {
  LifecycleHook: { fields: [web3.PublicKey] }
  Oracle: { fields: [web3.PublicKey] }
  AppData: { fields: [Authority] }
  LinkedLifecycleHook: { fields: [web3.PublicKey] }
  LinkedAppData: { fields: [Authority] }
  DataSection: { fields: [LinkedDataKey] }
}

/**
 * Union type respresenting the ExternalPluginAdapterKey data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isExternalPluginAdapterKey*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ExternalPluginAdapterKey =
  beet.DataEnumKeyAsKind<ExternalPluginAdapterKeyRecord>

export const isExternalPluginAdapterKeyLifecycleHook = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'LifecycleHook' } =>
  x.__kind === 'LifecycleHook'
export const isExternalPluginAdapterKeyOracle = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'Oracle' } => x.__kind === 'Oracle'
export const isExternalPluginAdapterKeyAppData = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'AppData' } =>
  x.__kind === 'AppData'
export const isExternalPluginAdapterKeyLinkedLifecycleHook = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'LinkedLifecycleHook' } =>
  x.__kind === 'LinkedLifecycleHook'
export const isExternalPluginAdapterKeyLinkedAppData = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'LinkedAppData' } =>
  x.__kind === 'LinkedAppData'
export const isExternalPluginAdapterKeyDataSection = (
  x: ExternalPluginAdapterKey,
): x is ExternalPluginAdapterKey & { __kind: 'DataSection' } =>
  x.__kind === 'DataSection'

/**
 * @category userTypes
 * @category generated
 */
export const externalPluginAdapterKeyBeet =
  beet.dataEnum<ExternalPluginAdapterKeyRecord>([
    [
      'LifecycleHook',
      new beet.BeetArgsStruct<ExternalPluginAdapterKeyRecord['LifecycleHook']>(
        [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
        'ExternalPluginAdapterKeyRecord["LifecycleHook"]',
      ),
    ],
    [
      'Oracle',
      new beet.BeetArgsStruct<ExternalPluginAdapterKeyRecord['Oracle']>(
        [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
        'ExternalPluginAdapterKeyRecord["Oracle"]',
      ),
    ],
    [
      'AppData',
      new beet.FixableBeetArgsStruct<ExternalPluginAdapterKeyRecord['AppData']>(
        [['fields', beet.tuple([authorityBeet])]],
        'ExternalPluginAdapterKeyRecord["AppData"]',
      ),
    ],
    [
      'LinkedLifecycleHook',
      new beet.BeetArgsStruct<
        ExternalPluginAdapterKeyRecord['LinkedLifecycleHook']
      >(
        [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
        'ExternalPluginAdapterKeyRecord["LinkedLifecycleHook"]',
      ),
    ],
    [
      'LinkedAppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterKeyRecord['LinkedAppData']
      >(
        [['fields', beet.tuple([authorityBeet])]],
        'ExternalPluginAdapterKeyRecord["LinkedAppData"]',
      ),
    ],
    [
      'DataSection',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterKeyRecord['DataSection']
      >(
        [['fields', beet.tuple([linkedDataKeyBeet])]],
        'ExternalPluginAdapterKeyRecord["DataSection"]',
      ),
    ],
  ]) as beet.FixableBeet<ExternalPluginAdapterKey, ExternalPluginAdapterKey>

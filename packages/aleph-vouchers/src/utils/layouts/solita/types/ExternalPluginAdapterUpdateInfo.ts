/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  LifecycleHookUpdateInfo,
  lifecycleHookUpdateInfoBeet,
} from './LifecycleHookUpdateInfo.js'
import { OracleUpdateInfo, oracleUpdateInfoBeet } from './OracleUpdateInfo.js'
import {
  AppDataUpdateInfo,
  appDataUpdateInfoBeet,
} from './AppDataUpdateInfo.js'
import {
  LinkedLifecycleHookUpdateInfo,
  linkedLifecycleHookUpdateInfoBeet,
} from './LinkedLifecycleHookUpdateInfo.js'
import {
  LinkedAppDataUpdateInfo,
  linkedAppDataUpdateInfoBeet,
} from './LinkedAppDataUpdateInfo.js'
/**
 * This type is used to derive the {@link ExternalPluginAdapterUpdateInfo} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ExternalPluginAdapterUpdateInfo} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ExternalPluginAdapterUpdateInfoRecord = {
  LifecycleHook: { fields: [LifecycleHookUpdateInfo] }
  Oracle: { fields: [OracleUpdateInfo] }
  AppData: { fields: [AppDataUpdateInfo] }
  LinkedLifecycleHook: { fields: [LinkedLifecycleHookUpdateInfo] }
  LinkedAppData: { fields: [LinkedAppDataUpdateInfo] }
}

/**
 * Union type respresenting the ExternalPluginAdapterUpdateInfo data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isExternalPluginAdapterUpdateInfo*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ExternalPluginAdapterUpdateInfo =
  beet.DataEnumKeyAsKind<ExternalPluginAdapterUpdateInfoRecord>

export const isExternalPluginAdapterUpdateInfoLifecycleHook = (
  x: ExternalPluginAdapterUpdateInfo,
): x is ExternalPluginAdapterUpdateInfo & { __kind: 'LifecycleHook' } =>
  x.__kind === 'LifecycleHook'
export const isExternalPluginAdapterUpdateInfoOracle = (
  x: ExternalPluginAdapterUpdateInfo,
): x is ExternalPluginAdapterUpdateInfo & { __kind: 'Oracle' } =>
  x.__kind === 'Oracle'
export const isExternalPluginAdapterUpdateInfoAppData = (
  x: ExternalPluginAdapterUpdateInfo,
): x is ExternalPluginAdapterUpdateInfo & { __kind: 'AppData' } =>
  x.__kind === 'AppData'
export const isExternalPluginAdapterUpdateInfoLinkedLifecycleHook = (
  x: ExternalPluginAdapterUpdateInfo,
): x is ExternalPluginAdapterUpdateInfo & { __kind: 'LinkedLifecycleHook' } =>
  x.__kind === 'LinkedLifecycleHook'
export const isExternalPluginAdapterUpdateInfoLinkedAppData = (
  x: ExternalPluginAdapterUpdateInfo,
): x is ExternalPluginAdapterUpdateInfo & { __kind: 'LinkedAppData' } =>
  x.__kind === 'LinkedAppData'

/**
 * @category userTypes
 * @category generated
 */
export const externalPluginAdapterUpdateInfoBeet =
  beet.dataEnum<ExternalPluginAdapterUpdateInfoRecord>([
    [
      'LifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterUpdateInfoRecord['LifecycleHook']
      >(
        [['fields', beet.tuple([lifecycleHookUpdateInfoBeet])]],
        'ExternalPluginAdapterUpdateInfoRecord["LifecycleHook"]',
      ),
    ],
    [
      'Oracle',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterUpdateInfoRecord['Oracle']
      >(
        [['fields', beet.tuple([oracleUpdateInfoBeet])]],
        'ExternalPluginAdapterUpdateInfoRecord["Oracle"]',
      ),
    ],
    [
      'AppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterUpdateInfoRecord['AppData']
      >(
        [['fields', beet.tuple([appDataUpdateInfoBeet])]],
        'ExternalPluginAdapterUpdateInfoRecord["AppData"]',
      ),
    ],
    [
      'LinkedLifecycleHook',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterUpdateInfoRecord['LinkedLifecycleHook']
      >(
        [['fields', beet.tuple([linkedLifecycleHookUpdateInfoBeet])]],
        'ExternalPluginAdapterUpdateInfoRecord["LinkedLifecycleHook"]',
      ),
    ],
    [
      'LinkedAppData',
      new beet.FixableBeetArgsStruct<
        ExternalPluginAdapterUpdateInfoRecord['LinkedAppData']
      >(
        [['fields', beet.tuple([linkedAppDataUpdateInfoBeet])]],
        'ExternalPluginAdapterUpdateInfoRecord["LinkedAppData"]',
      ),
    ],
  ]) as beet.FixableBeet<
    ExternalPluginAdapterUpdateInfo,
    ExternalPluginAdapterUpdateInfo
  >

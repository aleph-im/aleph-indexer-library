/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  ExternalValidationResult,
  externalValidationResultBeet,
} from './ExternalValidationResult.js'
/**
 * This type is used to derive the {@link OracleValidation} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link OracleValidation} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type OracleValidationRecord = {
  Uninitialized: void /* scalar variant */
  V1: {
    create: ExternalValidationResult
    transfer: ExternalValidationResult
    burn: ExternalValidationResult
    update: ExternalValidationResult
  }
}

/**
 * Union type respresenting the OracleValidation data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isOracleValidation*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type OracleValidation = beet.DataEnumKeyAsKind<OracleValidationRecord>

export const isOracleValidationUninitialized = (
  x: OracleValidation,
): x is OracleValidation & { __kind: 'Uninitialized' } =>
  x.__kind === 'Uninitialized'
export const isOracleValidationV1 = (
  x: OracleValidation,
): x is OracleValidation & { __kind: 'V1' } => x.__kind === 'V1'

/**
 * @category userTypes
 * @category generated
 */
export const oracleValidationBeet = beet.dataEnum<OracleValidationRecord>([
  ['Uninitialized', beet.unit],

  [
    'V1',
    new beet.BeetArgsStruct<OracleValidationRecord['V1']>(
      [
        ['create', externalValidationResultBeet],
        ['transfer', externalValidationResultBeet],
        ['burn', externalValidationResultBeet],
        ['update', externalValidationResultBeet],
      ],
      'OracleValidationRecord["V1"]',
    ),
  ],
]) as beet.FixableBeet<OracleValidation, OracleValidation>

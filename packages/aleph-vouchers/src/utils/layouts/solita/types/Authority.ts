/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link Authority} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Authority} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type AuthorityRecord = {
  None: void /* scalar variant */
  Owner: void /* scalar variant */
  UpdateAuthority: void /* scalar variant */
  Address: { address: web3.PublicKey }
}

/**
 * Union type respresenting the Authority data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isAuthority*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Authority = beet.DataEnumKeyAsKind<AuthorityRecord>

export const isAuthorityNone = (
  x: Authority,
): x is Authority & { __kind: 'None' } => x.__kind === 'None'
export const isAuthorityOwner = (
  x: Authority,
): x is Authority & { __kind: 'Owner' } => x.__kind === 'Owner'
export const isAuthorityUpdateAuthority = (
  x: Authority,
): x is Authority & { __kind: 'UpdateAuthority' } =>
  x.__kind === 'UpdateAuthority'
export const isAuthorityAddress = (
  x: Authority,
): x is Authority & { __kind: 'Address' } => x.__kind === 'Address'

/**
 * @category userTypes
 * @category generated
 */
export const authorityBeet = beet.dataEnum<AuthorityRecord>([
  ['None', beet.unit],
  ['Owner', beet.unit],
  ['UpdateAuthority', beet.unit],

  [
    'Address',
    new beet.BeetArgsStruct<AuthorityRecord['Address']>(
      [['address', beetSolana.publicKey]],
      'AuthorityRecord["Address"]',
    ),
  ],
]) as beet.FixableBeet<Authority, Authority>

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  ExternalPluginAdapterType,
  externalPluginAdapterTypeBeet,
} from './ExternalPluginAdapterType.js'
import { Authority, authorityBeet } from './Authority.js'
import {
  HookableLifecycleEvent,
  hookableLifecycleEventBeet,
} from './HookableLifecycleEvent.js'
import {
  ExternalCheckResult,
  externalCheckResultBeet,
} from './ExternalCheckResult.js'
export type ExternalRegistryRecord = {
  pluginType: ExternalPluginAdapterType
  authority: Authority
  lifecycleChecks: beet.COption<[HookableLifecycleEvent, ExternalCheckResult][]>
  offset: beet.bignum
  dataOffset: beet.COption<beet.bignum>
  dataLen: beet.COption<beet.bignum>
}

/**
 * @category userTypes
 * @category generated
 */
export const externalRegistryRecordBeet =
  new beet.FixableBeetArgsStruct<ExternalRegistryRecord>(
    [
      ['pluginType', externalPluginAdapterTypeBeet],
      ['authority', authorityBeet],
      [
        'lifecycleChecks',
        beet.coption(
          beet.array(
            beet.fixedSizeTuple([
              hookableLifecycleEventBeet,
              externalCheckResultBeet,
            ]),
          ),
        ),
      ],
      ['offset', beet.u64],
      ['dataOffset', beet.coption(beet.u64)],
      ['dataLen', beet.coption(beet.u64)],
    ],
    'ExternalRegistryRecord',
  )

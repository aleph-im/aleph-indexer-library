/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link ValidationResultsOffset} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ValidationResultsOffset} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ValidationResultsOffsetRecord = {
  NoOffset: void /* scalar variant */
  Anchor: void /* scalar variant */
  Custom: { fields: [beet.bignum] }
}

/**
 * Union type respresenting the ValidationResultsOffset data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isValidationResultsOffset*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ValidationResultsOffset =
  beet.DataEnumKeyAsKind<ValidationResultsOffsetRecord>

export const isValidationResultsOffsetNoOffset = (
  x: ValidationResultsOffset,
): x is ValidationResultsOffset & { __kind: 'NoOffset' } =>
  x.__kind === 'NoOffset'
export const isValidationResultsOffsetAnchor = (
  x: ValidationResultsOffset,
): x is ValidationResultsOffset & { __kind: 'Anchor' } => x.__kind === 'Anchor'
export const isValidationResultsOffsetCustom = (
  x: ValidationResultsOffset,
): x is ValidationResultsOffset & { __kind: 'Custom' } => x.__kind === 'Custom'

/**
 * @category userTypes
 * @category generated
 */
export const validationResultsOffsetBeet =
  beet.dataEnum<ValidationResultsOffsetRecord>([
    ['NoOffset', beet.unit],
    ['Anchor', beet.unit],
    [
      'Custom',
      new beet.BeetArgsStruct<ValidationResultsOffsetRecord['Custom']>(
        [['fields', beet.fixedSizeTuple([beet.u64])]],
        'ValidationResultsOffsetRecord["Custom"]',
      ),
    ],
  ]) as beet.FixableBeet<ValidationResultsOffset, ValidationResultsOffset>

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Key, keyBeet } from '../types/Key.js'
import { RegistryRecord, registryRecordBeet } from '../types/RegistryRecord.js'
import {
  ExternalRegistryRecord,
  externalRegistryRecordBeet,
} from '../types/ExternalRegistryRecord.js'

/**
 * Arguments used to create {@link PluginRegistryV1}
 * @category Accounts
 * @category generated
 */
export type PluginRegistryV1Args = {
  key: Key
  registry: RegistryRecord[]
  externalRegistry: ExternalRegistryRecord[]
}
/**
 * Holds the data for the {@link PluginRegistryV1} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PluginRegistryV1 implements PluginRegistryV1Args {
  private constructor(
    readonly key: Key,
    readonly registry: RegistryRecord[],
    readonly externalRegistry: ExternalRegistryRecord[],
  ) {}

  /**
   * Creates a {@link PluginRegistryV1} instance from the provided args.
   */
  static fromArgs(args: PluginRegistryV1Args) {
    return new PluginRegistryV1(args.key, args.registry, args.externalRegistry)
  }

  /**
   * Deserializes the {@link PluginRegistryV1} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [PluginRegistryV1, number] {
    return PluginRegistryV1.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PluginRegistryV1} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<PluginRegistryV1> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find PluginRegistryV1 account at ${address}`)
    }
    return PluginRegistryV1.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, pluginRegistryV1Beet)
  }

  /**
   * Deserializes the {@link PluginRegistryV1} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PluginRegistryV1, number] {
    return pluginRegistryV1Beet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link PluginRegistryV1} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return pluginRegistryV1Beet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PluginRegistryV1} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: PluginRegistryV1Args) {
    const instance = PluginRegistryV1.fromArgs(args)
    return pluginRegistryV1Beet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PluginRegistryV1} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: PluginRegistryV1Args,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      PluginRegistryV1.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link PluginRegistryV1} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      key: 'Key.' + Key[this.key],
      registry: this.registry,
      externalRegistry: this.externalRegistry,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const pluginRegistryV1Beet = new beet.FixableBeetStruct<
  PluginRegistryV1,
  PluginRegistryV1Args
>(
  [
    ['key', keyBeet],
    ['registry', beet.array(registryRecordBeet)],
    ['externalRegistry', beet.array(externalRegistryRecordBeet)],
  ],
  PluginRegistryV1.fromArgs,
  'PluginRegistryV1',
)

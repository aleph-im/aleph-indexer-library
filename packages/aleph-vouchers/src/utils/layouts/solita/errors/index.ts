/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidSystemProgram: 'Invalid System Program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSystemProgramError extends Error {
  readonly code: number = 0x0
  readonly name: string = 'InvalidSystemProgram'
  constructor() {
    super('Invalid System Program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSystemProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new InvalidSystemProgramError())
createErrorFromNameLookup.set(
  'InvalidSystemProgram',
  () => new InvalidSystemProgramError(),
)

/**
 * DeserializationError: 'Error deserializing account'
 *
 * @category Errors
 * @category generated
 */
export class DeserializationErrorError extends Error {
  readonly code: number = 0x1
  readonly name: string = 'DeserializationError'
  constructor() {
    super('Error deserializing account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeserializationErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new DeserializationErrorError())
createErrorFromNameLookup.set(
  'DeserializationError',
  () => new DeserializationErrorError(),
)

/**
 * SerializationError: 'Error serializing account'
 *
 * @category Errors
 * @category generated
 */
export class SerializationErrorError extends Error {
  readonly code: number = 0x2
  readonly name: string = 'SerializationError'
  constructor() {
    super('Error serializing account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SerializationErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new SerializationErrorError())
createErrorFromNameLookup.set(
  'SerializationError',
  () => new SerializationErrorError(),
)

/**
 * PluginsNotInitialized: 'Plugins not initialized'
 *
 * @category Errors
 * @category generated
 */
export class PluginsNotInitializedError extends Error {
  readonly code: number = 0x3
  readonly name: string = 'PluginsNotInitialized'
  constructor() {
    super('Plugins not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PluginsNotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new PluginsNotInitializedError())
createErrorFromNameLookup.set(
  'PluginsNotInitialized',
  () => new PluginsNotInitializedError(),
)

/**
 * PluginNotFound: 'Plugin not found'
 *
 * @category Errors
 * @category generated
 */
export class PluginNotFoundError extends Error {
  readonly code: number = 0x4
  readonly name: string = 'PluginNotFound'
  constructor() {
    super('Plugin not found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PluginNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new PluginNotFoundError())
createErrorFromNameLookup.set('PluginNotFound', () => new PluginNotFoundError())

/**
 * NumericalOverflow: 'Numerical Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x5
  readonly name: string = 'NumericalOverflow'
  constructor() {
    super('Numerical Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x5, () => new NumericalOverflowError())
createErrorFromNameLookup.set(
  'NumericalOverflow',
  () => new NumericalOverflowError(),
)

/**
 * IncorrectAccount: 'Incorrect account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAccountError extends Error {
  readonly code: number = 0x6
  readonly name: string = 'IncorrectAccount'
  constructor() {
    super('Incorrect account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x6, () => new IncorrectAccountError())
createErrorFromNameLookup.set(
  'IncorrectAccount',
  () => new IncorrectAccountError(),
)

/**
 * IncorrectAssetHash: 'Incorrect asset hash'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAssetHashError extends Error {
  readonly code: number = 0x7
  readonly name: string = 'IncorrectAssetHash'
  constructor() {
    super('Incorrect asset hash')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAssetHashError)
    }
  }
}

createErrorFromCodeLookup.set(0x7, () => new IncorrectAssetHashError())
createErrorFromNameLookup.set(
  'IncorrectAssetHash',
  () => new IncorrectAssetHashError(),
)

/**
 * InvalidPlugin: 'Invalid Plugin'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPluginError extends Error {
  readonly code: number = 0x8
  readonly name: string = 'InvalidPlugin'
  constructor() {
    super('Invalid Plugin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPluginError)
    }
  }
}

createErrorFromCodeLookup.set(0x8, () => new InvalidPluginError())
createErrorFromNameLookup.set('InvalidPlugin', () => new InvalidPluginError())

/**
 * InvalidAuthority: 'Invalid Authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x9
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid Authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x9, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError(),
)

/**
 * AssetIsFrozen: 'Cannot transfer a frozen asset'
 *
 * @category Errors
 * @category generated
 */
export class AssetIsFrozenError extends Error {
  readonly code: number = 0xa
  readonly name: string = 'AssetIsFrozen'
  constructor() {
    super('Cannot transfer a frozen asset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AssetIsFrozenError)
    }
  }
}

createErrorFromCodeLookup.set(0xa, () => new AssetIsFrozenError())
createErrorFromNameLookup.set('AssetIsFrozen', () => new AssetIsFrozenError())

/**
 * MissingCompressionProof: 'Missing compression proof'
 *
 * @category Errors
 * @category generated
 */
export class MissingCompressionProofError extends Error {
  readonly code: number = 0xb
  readonly name: string = 'MissingCompressionProof'
  constructor() {
    super('Missing compression proof')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingCompressionProofError)
    }
  }
}

createErrorFromCodeLookup.set(0xb, () => new MissingCompressionProofError())
createErrorFromNameLookup.set(
  'MissingCompressionProof',
  () => new MissingCompressionProofError(),
)

/**
 * CannotMigrateMasterWithSupply: 'Cannot migrate a master edition used for prints'
 *
 * @category Errors
 * @category generated
 */
export class CannotMigrateMasterWithSupplyError extends Error {
  readonly code: number = 0xc
  readonly name: string = 'CannotMigrateMasterWithSupply'
  constructor() {
    super('Cannot migrate a master edition used for prints')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotMigrateMasterWithSupplyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0xc,
  () => new CannotMigrateMasterWithSupplyError(),
)
createErrorFromNameLookup.set(
  'CannotMigrateMasterWithSupply',
  () => new CannotMigrateMasterWithSupplyError(),
)

/**
 * CannotMigratePrints: 'Cannot migrate a print edition'
 *
 * @category Errors
 * @category generated
 */
export class CannotMigratePrintsError extends Error {
  readonly code: number = 0xd
  readonly name: string = 'CannotMigratePrints'
  constructor() {
    super('Cannot migrate a print edition')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotMigratePrintsError)
    }
  }
}

createErrorFromCodeLookup.set(0xd, () => new CannotMigratePrintsError())
createErrorFromNameLookup.set(
  'CannotMigratePrints',
  () => new CannotMigratePrintsError(),
)

/**
 * CannotBurnCollection: 'Cannot burn a collection NFT'
 *
 * @category Errors
 * @category generated
 */
export class CannotBurnCollectionError extends Error {
  readonly code: number = 0xe
  readonly name: string = 'CannotBurnCollection'
  constructor() {
    super('Cannot burn a collection NFT')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBurnCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0xe, () => new CannotBurnCollectionError())
createErrorFromNameLookup.set(
  'CannotBurnCollection',
  () => new CannotBurnCollectionError(),
)

/**
 * PluginAlreadyExists: 'Plugin already exists'
 *
 * @category Errors
 * @category generated
 */
export class PluginAlreadyExistsError extends Error {
  readonly code: number = 0xf
  readonly name: string = 'PluginAlreadyExists'
  constructor() {
    super('Plugin already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PluginAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0xf, () => new PluginAlreadyExistsError())
createErrorFromNameLookup.set(
  'PluginAlreadyExists',
  () => new PluginAlreadyExistsError(),
)

/**
 * NumericalOverflowError: 'Numerical overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowErrorError extends Error {
  readonly code: number = 0x10
  readonly name: string = 'NumericalOverflowError'
  constructor() {
    super('Numerical overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x10, () => new NumericalOverflowErrorError())
createErrorFromNameLookup.set(
  'NumericalOverflowError',
  () => new NumericalOverflowErrorError(),
)

/**
 * AlreadyCompressed: 'Already compressed account'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyCompressedError extends Error {
  readonly code: number = 0x11
  readonly name: string = 'AlreadyCompressed'
  constructor() {
    super('Already compressed account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyCompressedError)
    }
  }
}

createErrorFromCodeLookup.set(0x11, () => new AlreadyCompressedError())
createErrorFromNameLookup.set(
  'AlreadyCompressed',
  () => new AlreadyCompressedError(),
)

/**
 * AlreadyDecompressed: 'Already decompressed account'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyDecompressedError extends Error {
  readonly code: number = 0x12
  readonly name: string = 'AlreadyDecompressed'
  constructor() {
    super('Already decompressed account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyDecompressedError)
    }
  }
}

createErrorFromCodeLookup.set(0x12, () => new AlreadyDecompressedError())
createErrorFromNameLookup.set(
  'AlreadyDecompressed',
  () => new AlreadyDecompressedError(),
)

/**
 * InvalidCollection: 'Invalid Collection passed in'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollectionError extends Error {
  readonly code: number = 0x13
  readonly name: string = 'InvalidCollection'
  constructor() {
    super('Invalid Collection passed in')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x13, () => new InvalidCollectionError())
createErrorFromNameLookup.set(
  'InvalidCollection',
  () => new InvalidCollectionError(),
)

/**
 * MissingUpdateAuthority: 'Missing update authority'
 *
 * @category Errors
 * @category generated
 */
export class MissingUpdateAuthorityError extends Error {
  readonly code: number = 0x14
  readonly name: string = 'MissingUpdateAuthority'
  constructor() {
    super('Missing update authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingUpdateAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x14, () => new MissingUpdateAuthorityError())
createErrorFromNameLookup.set(
  'MissingUpdateAuthority',
  () => new MissingUpdateAuthorityError(),
)

/**
 * MissingNewOwner: 'Missing new owner'
 *
 * @category Errors
 * @category generated
 */
export class MissingNewOwnerError extends Error {
  readonly code: number = 0x15
  readonly name: string = 'MissingNewOwner'
  constructor() {
    super('Missing new owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingNewOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x15, () => new MissingNewOwnerError())
createErrorFromNameLookup.set(
  'MissingNewOwner',
  () => new MissingNewOwnerError(),
)

/**
 * MissingSystemProgram: 'Missing system program'
 *
 * @category Errors
 * @category generated
 */
export class MissingSystemProgramError extends Error {
  readonly code: number = 0x16
  readonly name: string = 'MissingSystemProgram'
  constructor() {
    super('Missing system program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingSystemProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x16, () => new MissingSystemProgramError())
createErrorFromNameLookup.set(
  'MissingSystemProgram',
  () => new MissingSystemProgramError(),
)

/**
 * NotAvailable: 'Feature not available'
 *
 * @category Errors
 * @category generated
 */
export class NotAvailableError extends Error {
  readonly code: number = 0x17
  readonly name: string = 'NotAvailable'
  constructor() {
    super('Feature not available')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAvailableError)
    }
  }
}

createErrorFromCodeLookup.set(0x17, () => new NotAvailableError())
createErrorFromNameLookup.set('NotAvailable', () => new NotAvailableError())

/**
 * InvalidAsset: 'Invalid Asset passed in'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAssetError extends Error {
  readonly code: number = 0x18
  readonly name: string = 'InvalidAsset'
  constructor() {
    super('Invalid Asset passed in')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAssetError)
    }
  }
}

createErrorFromCodeLookup.set(0x18, () => new InvalidAssetError())
createErrorFromNameLookup.set('InvalidAsset', () => new InvalidAssetError())

/**
 * MissingCollection: 'Missing collection'
 *
 * @category Errors
 * @category generated
 */
export class MissingCollectionError extends Error {
  readonly code: number = 0x19
  readonly name: string = 'MissingCollection'
  constructor() {
    super('Missing collection')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x19, () => new MissingCollectionError())
createErrorFromNameLookup.set(
  'MissingCollection',
  () => new MissingCollectionError(),
)

/**
 * NoApprovals: 'Neither the asset or any plugins have approved this operation'
 *
 * @category Errors
 * @category generated
 */
export class NoApprovalsError extends Error {
  readonly code: number = 0x1a
  readonly name: string = 'NoApprovals'
  constructor() {
    super('Neither the asset or any plugins have approved this operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoApprovalsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1a, () => new NoApprovalsError())
createErrorFromNameLookup.set('NoApprovals', () => new NoApprovalsError())

/**
 * CannotRedelegate: 'Plugin Manager cannot redelegate a delegated plugin without revoking first'
 *
 * @category Errors
 * @category generated
 */
export class CannotRedelegateError extends Error {
  readonly code: number = 0x1b
  readonly name: string = 'CannotRedelegate'
  constructor() {
    super(
      'Plugin Manager cannot redelegate a delegated plugin without revoking first',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotRedelegateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1b, () => new CannotRedelegateError())
createErrorFromNameLookup.set(
  'CannotRedelegate',
  () => new CannotRedelegateError(),
)

/**
 * InvalidPluginSetting: 'Invalid setting for plugin'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPluginSettingError extends Error {
  readonly code: number = 0x1c
  readonly name: string = 'InvalidPluginSetting'
  constructor() {
    super('Invalid setting for plugin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPluginSettingError)
    }
  }
}

createErrorFromCodeLookup.set(0x1c, () => new InvalidPluginSettingError())
createErrorFromNameLookup.set(
  'InvalidPluginSetting',
  () => new InvalidPluginSettingError(),
)

/**
 * ConflictingAuthority: 'Cannot specify both an update authority and collection on an asset'
 *
 * @category Errors
 * @category generated
 */
export class ConflictingAuthorityError extends Error {
  readonly code: number = 0x1d
  readonly name: string = 'ConflictingAuthority'
  constructor() {
    super('Cannot specify both an update authority and collection on an asset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConflictingAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1d, () => new ConflictingAuthorityError())
createErrorFromNameLookup.set(
  'ConflictingAuthority',
  () => new ConflictingAuthorityError(),
)

/**
 * InvalidLogWrapperProgram: 'Invalid Log Wrapper Program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLogWrapperProgramError extends Error {
  readonly code: number = 0x1e
  readonly name: string = 'InvalidLogWrapperProgram'
  constructor() {
    super('Invalid Log Wrapper Program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLogWrapperProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1e, () => new InvalidLogWrapperProgramError())
createErrorFromNameLookup.set(
  'InvalidLogWrapperProgram',
  () => new InvalidLogWrapperProgramError(),
)

/**
 * ExternalPluginAdapterNotFound: 'External Plugin Adapter not found'
 *
 * @category Errors
 * @category generated
 */
export class ExternalPluginAdapterNotFoundError extends Error {
  readonly code: number = 0x1f
  readonly name: string = 'ExternalPluginAdapterNotFound'
  constructor() {
    super('External Plugin Adapter not found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExternalPluginAdapterNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1f,
  () => new ExternalPluginAdapterNotFoundError(),
)
createErrorFromNameLookup.set(
  'ExternalPluginAdapterNotFound',
  () => new ExternalPluginAdapterNotFoundError(),
)

/**
 * ExternalPluginAdapterAlreadyExists: 'External Plugin Adapter already exists'
 *
 * @category Errors
 * @category generated
 */
export class ExternalPluginAdapterAlreadyExistsError extends Error {
  readonly code: number = 0x20
  readonly name: string = 'ExternalPluginAdapterAlreadyExists'
  constructor() {
    super('External Plugin Adapter already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExternalPluginAdapterAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x20,
  () => new ExternalPluginAdapterAlreadyExistsError(),
)
createErrorFromNameLookup.set(
  'ExternalPluginAdapterAlreadyExists',
  () => new ExternalPluginAdapterAlreadyExistsError(),
)

/**
 * MissingAsset: 'Missing asset needed for extra account PDA derivation'
 *
 * @category Errors
 * @category generated
 */
export class MissingAssetError extends Error {
  readonly code: number = 0x21
  readonly name: string = 'MissingAsset'
  constructor() {
    super('Missing asset needed for extra account PDA derivation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingAssetError)
    }
  }
}

createErrorFromCodeLookup.set(0x21, () => new MissingAssetError())
createErrorFromNameLookup.set('MissingAsset', () => new MissingAssetError())

/**
 * MissingExternalPluginAdapterAccount: 'Missing account needed for external plugin adapter'
 *
 * @category Errors
 * @category generated
 */
export class MissingExternalPluginAdapterAccountError extends Error {
  readonly code: number = 0x22
  readonly name: string = 'MissingExternalPluginAdapterAccount'
  constructor() {
    super('Missing account needed for external plugin adapter')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingExternalPluginAdapterAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x22,
  () => new MissingExternalPluginAdapterAccountError(),
)
createErrorFromNameLookup.set(
  'MissingExternalPluginAdapterAccount',
  () => new MissingExternalPluginAdapterAccountError(),
)

/**
 * OracleCanRejectOnly: 'Oracle external plugin adapter can only be configured to reject'
 *
 * @category Errors
 * @category generated
 */
export class OracleCanRejectOnlyError extends Error {
  readonly code: number = 0x23
  readonly name: string = 'OracleCanRejectOnly'
  constructor() {
    super('Oracle external plugin adapter can only be configured to reject')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OracleCanRejectOnlyError)
    }
  }
}

createErrorFromCodeLookup.set(0x23, () => new OracleCanRejectOnlyError())
createErrorFromNameLookup.set(
  'OracleCanRejectOnly',
  () => new OracleCanRejectOnlyError(),
)

/**
 * RequiresLifecycleCheck: 'External plugin adapter must have at least one lifecycle check'
 *
 * @category Errors
 * @category generated
 */
export class RequiresLifecycleCheckError extends Error {
  readonly code: number = 0x24
  readonly name: string = 'RequiresLifecycleCheck'
  constructor() {
    super('External plugin adapter must have at least one lifecycle check')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequiresLifecycleCheckError)
    }
  }
}

createErrorFromCodeLookup.set(0x24, () => new RequiresLifecycleCheckError())
createErrorFromNameLookup.set(
  'RequiresLifecycleCheck',
  () => new RequiresLifecycleCheckError(),
)

/**
 * DuplicateLifecycleChecks: 'Duplicate lifecycle checks were provided for external plugin adapter '
 *
 * @category Errors
 * @category generated
 */
export class DuplicateLifecycleChecksError extends Error {
  readonly code: number = 0x25
  readonly name: string = 'DuplicateLifecycleChecks'
  constructor() {
    super(
      'Duplicate lifecycle checks were provided for external plugin adapter ',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DuplicateLifecycleChecksError)
    }
  }
}

createErrorFromCodeLookup.set(0x25, () => new DuplicateLifecycleChecksError())
createErrorFromNameLookup.set(
  'DuplicateLifecycleChecks',
  () => new DuplicateLifecycleChecksError(),
)

/**
 * InvalidOracleAccountData: 'Could not read from oracle account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOracleAccountDataError extends Error {
  readonly code: number = 0x26
  readonly name: string = 'InvalidOracleAccountData'
  constructor() {
    super('Could not read from oracle account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOracleAccountDataError)
    }
  }
}

createErrorFromCodeLookup.set(0x26, () => new InvalidOracleAccountDataError())
createErrorFromNameLookup.set(
  'InvalidOracleAccountData',
  () => new InvalidOracleAccountDataError(),
)

/**
 * UninitializedOracleAccount: 'Oracle account is uninitialized'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedOracleAccountError extends Error {
  readonly code: number = 0x27
  readonly name: string = 'UninitializedOracleAccount'
  constructor() {
    super('Oracle account is uninitialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedOracleAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x27, () => new UninitializedOracleAccountError())
createErrorFromNameLookup.set(
  'UninitializedOracleAccount',
  () => new UninitializedOracleAccountError(),
)

/**
 * MissingSigner: 'Missing required signer for operation'
 *
 * @category Errors
 * @category generated
 */
export class MissingSignerError extends Error {
  readonly code: number = 0x28
  readonly name: string = 'MissingSigner'
  constructor() {
    super('Missing required signer for operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x28, () => new MissingSignerError())
createErrorFromNameLookup.set('MissingSigner', () => new MissingSignerError())

/**
 * InvalidPluginOperation: 'Invalid plugin operation'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPluginOperationError extends Error {
  readonly code: number = 0x29
  readonly name: string = 'InvalidPluginOperation'
  constructor() {
    super('Invalid plugin operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPluginOperationError)
    }
  }
}

createErrorFromCodeLookup.set(0x29, () => new InvalidPluginOperationError())
createErrorFromNameLookup.set(
  'InvalidPluginOperation',
  () => new InvalidPluginOperationError(),
)

/**
 * CollectionMustBeEmpty: 'Collection must be empty to be burned'
 *
 * @category Errors
 * @category generated
 */
export class CollectionMustBeEmptyError extends Error {
  readonly code: number = 0x2a
  readonly name: string = 'CollectionMustBeEmpty'
  constructor() {
    super('Collection must be empty to be burned')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionMustBeEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x2a, () => new CollectionMustBeEmptyError())
createErrorFromNameLookup.set(
  'CollectionMustBeEmpty',
  () => new CollectionMustBeEmptyError(),
)

/**
 * TwoDataSources: 'Two data sources provided, only one is allowed'
 *
 * @category Errors
 * @category generated
 */
export class TwoDataSourcesError extends Error {
  readonly code: number = 0x2b
  readonly name: string = 'TwoDataSources'
  constructor() {
    super('Two data sources provided, only one is allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TwoDataSourcesError)
    }
  }
}

createErrorFromCodeLookup.set(0x2b, () => new TwoDataSourcesError())
createErrorFromNameLookup.set('TwoDataSources', () => new TwoDataSourcesError())

/**
 * UnsupportedOperation: 'External Plugin does not support this operation'
 *
 * @category Errors
 * @category generated
 */
export class UnsupportedOperationError extends Error {
  readonly code: number = 0x2c
  readonly name: string = 'UnsupportedOperation'
  constructor() {
    super('External Plugin does not support this operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnsupportedOperationError)
    }
  }
}

createErrorFromCodeLookup.set(0x2c, () => new UnsupportedOperationError())
createErrorFromNameLookup.set(
  'UnsupportedOperation',
  () => new UnsupportedOperationError(),
)

/**
 * NoDataSources: 'No data sources provided, one is required'
 *
 * @category Errors
 * @category generated
 */
export class NoDataSourcesError extends Error {
  readonly code: number = 0x2d
  readonly name: string = 'NoDataSources'
  constructor() {
    super('No data sources provided, one is required')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoDataSourcesError)
    }
  }
}

createErrorFromCodeLookup.set(0x2d, () => new NoDataSourcesError())
createErrorFromNameLookup.set('NoDataSources', () => new NoDataSourcesError())

/**
 * InvalidPluginAdapterTarget: 'This plugin adapter cannot be added to an Asset'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPluginAdapterTargetError extends Error {
  readonly code: number = 0x2e
  readonly name: string = 'InvalidPluginAdapterTarget'
  constructor() {
    super('This plugin adapter cannot be added to an Asset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPluginAdapterTargetError)
    }
  }
}

createErrorFromCodeLookup.set(0x2e, () => new InvalidPluginAdapterTargetError())
createErrorFromNameLookup.set(
  'InvalidPluginAdapterTarget',
  () => new InvalidPluginAdapterTargetError(),
)

/**
 * CannotAddDataSection: 'Cannot add a Data Section without a linked external plugin'
 *
 * @category Errors
 * @category generated
 */
export class CannotAddDataSectionError extends Error {
  readonly code: number = 0x2f
  readonly name: string = 'CannotAddDataSection'
  constructor() {
    super('Cannot add a Data Section without a linked external plugin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotAddDataSectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x2f, () => new CannotAddDataSectionError())
createErrorFromNameLookup.set(
  'CannotAddDataSection',
  () => new CannotAddDataSectionError(),
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
